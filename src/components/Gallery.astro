---
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";

// Import all images from the 2024-edition folder using glob
const imageFiles = await Astro.glob('/src/assets/images/2024-edition/*.{jpg,jpeg,png,webp}');

// Create simplified image array with just the src
const images = imageFiles.map((file, index) => ({
    src: file.default,
    index: index + 1
}));

// Calculate pagination info
const imagesPerPage = 10;
const totalPages = Math.ceil(images.length / imagesPerPage);
---

<section
    id="gallery"
    class="relative min-h-screen py-6 sm:py-10 bg-gradient-to-br from-primary-900 via-primary-500 to-secondary-500 overflow-hidden"
>
    <!-- Grid pattern overlay -->
    <div
        class="absolute inset-0 opacity-5"
        style="background-image: radial-gradient(circle, #ffffff 1px, transparent 1px); background-size: 30px 30px; sm:background-size: 50px 50px;"
    >
    </div>

    <div class="relative z-10 max-w-7xl mx-auto px-3 sm:px-4 lg:px-8">
        <!-- Header Section -->
        <div class="text-center mb-8 sm:mb-12 lg:mb-16">
            <div
                class="inline-flex items-center px-3 sm:px-4 py-1.5 sm:py-2 rounded-full bg-secondary-500/10 border border-secondary-500/20 mb-4 sm:mb-6"
            >
                <Icon
                    name="tabler/camara"
                    class="w-4 h-4 sm:w-5 sm:h-5 text-secondary-400 mr-1.5 sm:mr-2"
                />
                <span class="text-secondary-400 text-xs sm:text-sm font-medium"
                    >Memorias 2024</span
                >
            </div>
            <h1
                class="font-nova text-5xl md:text-7xl lg:text-8xl text-white mb-4 sm:mb-6 tracking-tight"
            >
                <span
                    class="bg-gradient-to-r from-secondary via-secondary-400 to-white bg-clip-text text-transparent"
                >
                    Galería
                </span>
            </h1>
            <p class="text-white text-base sm:text-lg lg:text-xl max-w-2xl mx-auto leading-relaxed mb-6 sm:mb-8 px-4">
                Revive los momentos más emocionantes de la edición 2024. 
                Cada imagen cuenta una historia de esfuerzo, pasión y superación.
            </p>
            
            <!-- Stats Badge -->
            <div
                class="inline-flex items-center space-x-3 sm:space-x-6 px-4 sm:px-6 py-2 sm:py-3 bg-white/5 backdrop-blur-lg rounded-full border border-white/10"
            >
                <div class="text-center">
                    <div class="text-lg sm:text-2xl font-bold text-white">{images.length}</div>
                    <div class="text-xs sm:text-sm text-slate-400">Fotografías</div>
                </div>
                <div class="w-px h-6 sm:h-8 bg-white/20"></div>
                <div class="text-center">
                    <div class="text-lg sm:text-2xl font-bold text-white">2024</div>
                    <div class="text-xs sm:text-sm text-slate-400">Edición</div>
                </div>
                <div class="w-px h-6 sm:h-8 bg-white/20"></div>
                <div class="text-center">
                    <div class="text-lg sm:text-2xl font-bold text-white">∞</div>
                    <div class="text-xs sm:text-sm text-slate-400">Memorias</div>
                </div>
            </div>
        </div>

        <!-- Gallery Grid -->
        <div id="gallery-grid" class="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-2 sm:gap-3 md:gap-4 mb-8 sm:mb-12">
            {images.map((image, index) => (
                <div 
                    class="group relative overflow-hidden rounded-xl sm:rounded-2xl transform transition-all duration-300 hover:scale-[1.02] active:scale-[0.98] touch-manipulation gallery-item"
                    data-image-index={index}
                    style={index >= imagesPerPage ? "display: none;" : ""}
                >
                    <!-- Image container -->
                    <div class="relative aspect-square overflow-hidden rounded-xl sm:rounded-2xl">
                        <!-- Using Image component with optimized sizes for thumbnails -->
                        <Image
                            src={image.src}
                            alt={`15K URRAO 2024 - Imagen ${image.index}`}
                            class="w-full h-full object-cover transition-all duration-500 group-hover:scale-110 group-hover:rotate-1"
                            loading={index < 10 ? "eager" : "lazy"}
                            decoding="async"
                            widths={[200, 300, 400]}
                            sizes="(max-width: 640px) 50vw, (max-width: 768px) 33vw, (max-width: 1024px) 25vw, 20vw"
                            format="webp"
                            quality={80}
                        />
                        
                        <!-- Loading placeholder -->
                        <div class="absolute inset-0 bg-gradient-to-br from-gray-300 to-gray-400 animate-pulse gallery-placeholder" style="display: none;"></div>
                        
                        <!-- Hover overlay with preview info -->
                        <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-0 group-hover:opacity-100 group-active:opacity-100 transition-all duration-300 z-20">
                            <div class="absolute bottom-2 sm:bottom-4 left-2 sm:left-4 right-2 sm:right-4">
                                <div class="flex items-center justify-between">
                                    <div class="flex-1 pr-2 sm:pr-3">
                                        <div class="text-white text-xs sm:text-sm font-medium mb-0.5 sm:mb-1">
                                            #{image.index} - 15K URRAO 2024
                                        </div>
                                        <div class="text-white/80 text-xs leading-relaxed line-clamp-2">
                                            Memoria de la edición 2024
                                        </div>
                                    </div>
                                    <div class="w-8 h-8 sm:w-10 sm:h-10 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center group-hover:bg-secondary-500/40 transition-colors duration-300 flex-shrink-0">
                                        <Icon
                                            name="tabler/medal"
                                            class="w-4 h-4 sm:w-5 sm:h-5 text-white"
                                        />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Corner badge -->
                    <div
                        class="absolute top-2 sm:top-3 right-2 sm:right-3 w-6 h-6 sm:w-7 sm:h-7 bg-gradient-to-br from-secondary-500 to-secondary-600 rounded-full flex items-center justify-center shadow-lg z-30 transform transition-transform duration-300 group-hover:scale-110"
                    >
                        <span class="text-white text-xs font-bold">{image.index}</span>
                    </div>
                </div>
            ))}
        </div>

        <!-- Gallery Controls -->
        <div class="flex justify-center items-center space-x-3 sm:space-x-4 mb-8 sm:mb-12">
            <button
                id="prev-batch"
                class="flex items-center space-x-1.5 sm:space-x-2 px-3 sm:px-4 py-2 bg-white/10 hover:bg-white/20 border border-white/20 hover:border-white/30 rounded-xl transition-all duration-300 text-white touch-manipulation disabled:opacity-50 disabled:pointer-events-none"
                disabled
            >
                <Icon name="tabler/caret-left" class="w-4 h-4" />
                <span class="text-xs sm:text-sm">Anterior</span>
            </button>
            
            <div id="pagination-dots" class="flex items-center space-x-1.5 sm:space-x-2">
                <!-- Pagination dots will be generated by JavaScript -->
            </div>
            
            <button
                id="next-batch"
                class="flex items-center space-x-1.5 sm:space-x-2 px-3 sm:px-4 py-2 bg-white/10 hover:bg-white/20 border border-white/20 hover:border-white/30 rounded-xl transition-all duration-300 text-white touch-manipulation disabled:opacity-50 disabled:pointer-events-none"
            >
                <span class="text-xs sm:text-sm">Siguiente</span>
                <Icon name="tabler/caret-right" class="w-4 h-4" />
            </button>
        </div>

        <!-- Page Info -->
        <div class="text-center mb-8 sm:mb-12">
            <div class="inline-flex items-center space-x-2 px-4 py-2 bg-white/5 backdrop-blur-lg rounded-full border border-white/10">
                <span class="text-white text-sm">Página</span>
                <span id="current-page" class="text-secondary-400 font-bold text-sm">1</span>
                <span class="text-white text-sm">de</span>
                <span class="text-secondary-400 font-bold text-sm">{totalPages}</span>
            </div>
        </div>
    </div>
</section>

<style>
    /* Enhanced glassmorphism effects */
    .backdrop-blur-lg {
        backdrop-filter: blur(16px);
        -webkit-backdrop-filter: blur(16px);
    }

    .backdrop-blur-sm {
        backdrop-filter: blur(4px);
        -webkit-backdrop-filter: blur(4px);
    }

    .backdrop-blur-xl {
        backdrop-filter: blur(24px);
        -webkit-backdrop-filter: blur(24px);
    }

    /* Smooth image loading */
    img {
        image-rendering: -webkit-optimize-contrast;
        image-rendering: crisp-edges;
    }

    /* Gallery item animations */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .gallery-item-animate {
        animation: fadeInUp 0.6s ease-out forwards;
    }

    /* Loading placeholder animation */
    .gallery-placeholder {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading 1.5s infinite;
    }

    @keyframes loading {
        0% {
            background-position: 200% 0;
        }
        100% {
            background-position: -200% 0;
        }
    }

    /* Pagination dot animations */
    .pagination-dot {
        transition: all 0.3s ease;
    }

    .pagination-dot.active {
        background-color: rgb(34 197 94);
        transform: scale(1.2);
    }

    /* Custom scrollbar */
    .gallery-container {
        scrollbar-width: thin;
        scrollbar-color: rgba(255, 255, 255, 0.3) transparent;
    }

    .gallery-container::-webkit-scrollbar {
        width: 6px;
    }

    .gallery-container::-webkit-scrollbar-track {
        background: transparent;
    }

    .gallery-container::-webkit-scrollbar-thumb {
        background-color: rgba(255, 255, 255, 0.3);
        border-radius: 3px;
    }

    .gallery-container::-webkit-scrollbar-thumb:hover {
        background-color: rgba(255, 255, 255, 0.5);
    }

    /* Mobile optimizations */
    .touch-manipulation {
        touch-action: manipulation;
    }

    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    /* Responsive grid pattern */
    @media (max-width: 640px) {
        .grid-pattern {
            background-size: 30px 30px;
        }
    }

    /* Prevent zoom on input focus for iOS */
    @media screen and (-webkit-min-device-pixel-ratio: 0) {
        input, select, textarea {
            font-size: 16px;
        }
    }
</style>

<script>
    // Gallery with pagination functionality - Plain JavaScript
    class Gallery {
        constructor() {
            // Initialize properties with explicit assignments
            /** @type {number} */
            this.currentPage = 1;
            /** @type {number} */
            this.imagesPerPage = 10;
            /** @type {Array<{element: Element, index: number}>} */
            this.allImages = [];
            /** @type {number} */
            this.totalPages = 0;
            /** @type {HTMLElement | null} */
            this.galleryGrid = null;
            /** @type {HTMLButtonElement | null} */
            this.prevBtn = null;
            /** @type {HTMLButtonElement | null} */
            this.nextBtn = null;
            /** @type {HTMLElement | null} */
            this.currentPageElement = null;
            /** @type {HTMLElement | null} */
            this.paginationDots = null;
            
            this.init();
        }
        
        init() {
            // Get DOM elements
            this.galleryGrid = document.getElementById('gallery-grid');
            this.prevBtn = document.getElementById('prev-batch');
            this.nextBtn = document.getElementById('next-batch');
            this.currentPageElement = document.getElementById('current-page');
            this.paginationDots = document.getElementById('pagination-dots');
            
            // Collect all images data
            this.collectImages();
            
            // Calculate total pages
            this.totalPages = Math.ceil(this.allImages.length / this.imagesPerPage);
            
            // Initialize pagination
            this.initPagination();
            
            // Bind events
            this.bindEvents();
            
            // Initialize lazy loading
            this.initLazyLoading();
            
            // Initialize gallery animations
            this.initGalleryAnimations();
        }
        
        collectImages() {
            const galleryItems = document.querySelectorAll('.gallery-item');
            this.allImages = Array.from(galleryItems).map((item, index) => ({
                element: item,
                index: index
            }));
        }
        
        initPagination() {
            // Generate pagination dots
            this.generatePaginationDots();
            
            // Update page info
            this.updatePageInfo();
            
            // Update button states
            this.updateButtonStates();
        }
        
        generatePaginationDots() {
            if (!this.paginationDots) return;
            
            this.paginationDots.innerHTML = '';
            
            for (let i = 1; i <= this.totalPages; i++) {
                const dot = document.createElement('div');
                dot.className = `w-1.5 h-1.5 sm:w-2 sm:h-2 rounded-full pagination-dot cursor-pointer transition-all duration-300 ${
                    i === 1 ? 'bg-secondary-500 active' : 'bg-white/30'
                }`;
                dot.dataset.page = i.toString();
                
                dot.addEventListener('click', () => {
                    this.goToPage(i);
                });
                
                this.paginationDots.appendChild(dot);
            }
        }
        
        bindEvents() {
            // Navigation buttons
            if (this.prevBtn) {
                this.prevBtn.addEventListener('click', () => {
                    if (this.currentPage > 1) {
                        this.goToPage(this.currentPage - 1);
                    }
                });
            }
            
            if (this.nextBtn) {
                this.nextBtn.addEventListener('click', () => {
                    if (this.currentPage < this.totalPages) {
                        this.goToPage(this.currentPage + 1);
                    }
                });
            }
        }
        
        goToPage(page) {
            if (page < 1 || page > this.totalPages) return;
            
            this.currentPage = page;
            this.updateGallery();
            this.updatePageInfo();
            this.updateButtonStates();
            this.updatePaginationDots();
        }
        
        updateGallery() {
            if (!this.galleryGrid) return;
            
            const startIndex = (this.currentPage - 1) * this.imagesPerPage;
            const endIndex = startIndex + this.imagesPerPage;
            
            // Hide all images first
            this.allImages.forEach(item => {
                item.element.style.display = 'none';
                item.element.classList.remove('gallery-item-animate');
            });
            
            // Show images for current page with animation
            this.allImages.slice(startIndex, endIndex).forEach((item, index) => {
                item.element.style.display = 'block';
                if (item.element instanceof HTMLElement) {
                    item.element.style.animationDelay = `${index * 0.1}s`;
                }
                
                // Trigger animation after a short delay
                setTimeout(() => {
                    item.element.classList.add('gallery-item-animate');
                }, 50);
            });
        }
        
        updatePageInfo() {
            if (this.currentPageElement) {
                this.currentPageElement.textContent = this.currentPage.toString();
            }
        }
        
        updateButtonStates() {
            if (this.prevBtn) {
                this.prevBtn.disabled = this.currentPage === 1;
            }
            
            if (this.nextBtn) {
                this.nextBtn.disabled = this.currentPage === this.totalPages;
            }
        }
        
        updatePaginationDots() {
            const dots = this.paginationDots?.querySelectorAll('.pagination-dot');
            if (!dots) return;
            
            dots.forEach((dot, index) => {
                const pageNumber = index + 1;
                if (pageNumber === this.currentPage) {
                    dot.classList.add('active');
                    dot.classList.remove('bg-white/30');
                    dot.classList.add('bg-secondary-500');
                } else {
                    dot.classList.remove('active');
                    dot.classList.remove('bg-secondary-500');
                    dot.classList.add('bg-white/30');
                }
            });
        }
        
        initLazyLoading() {
            if ('IntersectionObserver' in window) {
                const imageObserver = new IntersectionObserver((entries, observer) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const img = entry.target;
                            img.classList.add('loaded');
                            observer.unobserve(img);
                        }
                    });
                }, {
                    rootMargin: '50px 0px',
                    threshold: 0.1
                });

                // Observe all gallery images
                const images = document.querySelectorAll('#gallery img');
                images.forEach(img => imageObserver.observe(img));
            }
        }
        
        initGalleryAnimations() {
            if ('IntersectionObserver' in window) {
                const animationObserver = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('gallery-item-animate');
                        }
                    });
                }, {
                    threshold: 0.1,
                    rootMargin: '0px 0px -50px 0px'
                });

                // Initial animation for visible items
                const visibleItems = document.querySelectorAll('.gallery-item[style*="display: block"], .gallery-item:not([style*="display: none"])');
                visibleItems.forEach((item, index) => {
                    if (item instanceof HTMLElement) {
                        item.style.animationDelay = `${index * 0.1}s`;
                    }
                    animationObserver.observe(item);
                });
            }
        }
    }

    // Initialize gallery when DOM is loaded
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            new Gallery();
        });
    } else {
        new Gallery();
    }
</script>