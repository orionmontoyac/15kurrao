---
import { Icon } from "astro-icon/components";

export interface Props {
    id: number;
    name: string;
    distance: "10K" | "15K";
    registrationTime: string;
    timeAgo: number; // minutes
    avatar: string;
    location: string;
    gender: string;
}

const { id, name, distance, registrationTime, timeAgo, avatar, location, gender } = Astro.props;
---

<div 
    class="group relative overflow-hidden rounded-2xl cursor-pointer transform transition-all duration-300 hover:scale-[1.02] bg-gradient-to-br from-primary-800/80 to-primary-500/80 backdrop-blur-sm border-1 border-white/10 hover:border-secondary-500/30 hover:shadow-lg hover:shadow-secondary-500/10"
    data-runner-id={id}
    data-runner-name={name}
    data-runner-distance={distance}
    data-runner-location={location}
    data-runner-avatar={avatar}
    data-runner-gender={gender}
>
    <!-- Image Section -->
    <div class="relative aspect-[4/5] overflow-hidden">
        <img
            src={avatar}
            alt={name}
            width="294"
            height="367"
            class="w-full h-full object-cover object-top transition-all duration-500 group-hover:scale-110"
            loading="lazy"
        />
        
        <!-- Gradient overlay -->
        <div class="absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
        
        <!-- Distance Badge -->
        <div class={`absolute top-3 right-3 px-3 py-1 rounded-full text-xs font-bold shadow-lg ${
            distance === "15K" 
                ? "bg-gradient-to-r from-primary-500 to-primary-600 text-white" 
                : "bg-gradient-to-r from-orange-500 to-orange-600 text-white"
        }`}>
            <span class="text-white font-nova md:text-sm text-lg">
                {distance}
            </span>
        </div>
        
        <!-- Share Button -->
        <button
            class="runner-share-btn absolute top-3 left-3 size-10 bg-gradient-to-br from-secondary-500 to-secondary-600 rounded-full flex items-center justify-center shadow-lg transform transition-all duration-300 hover:scale-110 hover:shadow-xl hover:shadow-secondary-500/25 z-10"
            title="Compartir corredor"
            type="button"
        >
            <Icon name="tabler/share" class="size-5 text-white" />
        </button>
        
        <!-- Recent Registration Badge -->
        {timeAgo <= 60 && (
            <div class="absolute top-3 left-12 w-8 h-8 bg-gradient-to-br from-green-500 to-green-600 rounded-full flex items-center justify-center shadow-lg transform transition-all duration-300 group-hover:scale-110">
                <Icon name="tabler/clock" class="w-4 h-4 text-white" />
            </div>
        )}
    </div>
    
    <!-- Content Section -->
    <div class="p-4">
        <!-- Runner Name -->
        <h3 id="runner-name"
        class="text-white font-semibold md:text-xl text-3xl leading-tight mb-2 group-hover:text-secondary-300 transition-colors duration-300">
            {name}
        </h3>
        
        <!-- Welcome Message -->
        <p class="text-slate-300 text-lg flex items-center mb-3">
            <!-- <Icon name="tabler/check" class="w-3 h-3 mr-1 flex-shrink-0" /> -->
            <span class="truncate">{gender === 'Masculino' ? 'Bienvenido' : 'Bienvenida'} a la carrera</span>
        </p>
        
        <!-- Registration Status -->
        <div class="flex items-center justify-between">
            <div class="flex items-center space-x-2">
                <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                <span class="text-green-400 text-sm font-medium">
                    {gender === 'Masculino' ? 'Inscrito' : 'Inscrita'} 
                </span>
            </div>
            <span class="text-slate-300 text-sm">
                12 de Octubre 2025
            </span>
        </div>
    </div>
    
    <!-- Hover Glow Effect -->
    <div class="absolute inset-0 bg-gradient-to-br from-secondary-500/0 to-secondary-500/0 group-hover:from-secondary-500/5 group-hover:to-transparent rounded-2xl transition-all duration-500 pointer-events-none"></div>
</div>

<!-- Share Modal -->
<div id="share-modal" class="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4 opacity-0 invisible transition-all duration-300">
    <div class="bg-white/30 backdrop-blur-lg border border-white/20 rounded-2xl p-6 max-w-sm w-full transform scale-95 transition-all duration-300">
        <!-- Modal Header -->
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-white font-semibold text-lg">Compartir imagen generada</h3>
            <button id="close-share-modal" class="text-white/70 hover:text-white transition-colors p-1" type="button">
                <Icon name="tabler/x" class="w-5 h-5" />
            </button>
        </div>
        
        <!-- Runner Info Preview -->
        <!-- <div id="runner-preview" class="bg-white/5 rounded-xl p-4 mb-6 border border-white/10">
            <div class="flex items-center space-x-3">
                <img id="preview-avatar" src="" alt="" class="w-12 h-12 rounded-full object-cover" />
                <div>
                    <h4 id="preview-name" class="text-white font-medium"></h4>
                    <p id="preview-info" class="text-slate-300 text-sm"></p>
                </div>
            </div>
        </div> -->
        
        <!-- Generated Image Preview -->
        <div id="image-preview-container" class="hidden mb-6">
            <h4 class="text-white font-medium text-sm mb-3 text-center">Aqui tienes una imagen genial para compartir en tus redes sociales:</h4>
            <div class="bg-white/5 rounded-xl p-4 border border-white/10">
                <div id="image-preview" class="w-32 h-60 mx-auto overflow-hidden rounded-lg flex items-center justify-center">
                    <div class="text-center text-white/60">
                        <Icon name="tabler/medal" class="w-8 h-8 mx-auto mb-2 opacity-50" />
                        <p class="text-xs">Cargando imagen generada...</p>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Share Options -->
        <div class="space-y-3">
            <!-- Mobile Share Button - Hidden for now -->
            <button id="share-mobile" class="hidden w-full flex items-center space-x-3 p-4 bg-gradient-to-r from-purple-500 to-pink-600 rounded-xl text-white font-medium hover:shadow-lg hover:shadow-purple-500/25 transition-all duration-300 transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed" type="button">
                <Icon name="tabler/share" class="w-5 h-5" />
                <span>Compartir en Redes Sociales</span>
            </button>
            
            <!-- Download Image -->
            <button id="download-image" class="w-full flex items-center space-x-3 p-4 bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl text-white font-medium hover:shadow-lg hover:shadow-blue-500/25 transition-all duration-300 transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed" type="button">
                <Icon name="tabler/download" class="w-5 h-5" />
                <span>Descargar Imagen</span>
            </button>
        </div>
        
        <!-- Loading State -->
        <div id="loading-state" class="hidden text-center py-4">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto mb-2"></div>
            <p class="text-white text-sm">Procesando imagen...</p>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div id="toast-container" class="fixed bottom-4 right-4 z-60 space-y-2"></div>

<style>
    /* Enhanced glassmorphism effects */
    .backdrop-blur-sm {
        backdrop-filter: blur(4px);
        -webkit-backdrop-filter: blur(4px);
    }
    
    .backdrop-blur-lg {
        backdrop-filter: blur(16px);
        -webkit-backdrop-filter: blur(16px);
    }
    
    /* Smooth image loading */
    img {
        image-rendering: -webkit-optimize-contrast;
        image-rendering: crisp-edges;
    }
    
    /* Pulse animation */
    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }
    
    .animate-pulse {
        animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }
    
    /* Spin animation for loading */
    @keyframes spin {
        to { transform: rotate(360deg); }
    }
    
    .animate-spin {
        animation: spin 1s linear infinite;
    }
    
    /* Modal animations */
    #share-modal.show {
        opacity: 1;
        visibility: visible;
    }
    
    #share-modal.show > div {
        transform: scale(1);
    }
</style>

<script>
    // Types
    interface RunnerData {
        id: number;
        name: string;
        distance: string;
        location: string;
        avatar: string;
    }

    interface ToastOptions {
        type?: 'success' | 'error' | 'info';
        duration?: number;
    }

    // Image Capture Service using html2canvas
    class ImageCaptureService {
        static async captureElement(element: HTMLElement): Promise<Blob> {
            // Dynamic import of html2canvas
            const html2canvas = (await import('html2canvas')).default;
            
            const canvas = await html2canvas(element, {
                backgroundColor: null,
                scale: 2,
                useCORS: true,
                allowTaint: true,
                logging: false
            });
            
            return new Promise((resolve) => {
                canvas.toBlob((blob) => {
                    if (blob) {
                        resolve(blob);
                    } else {
                        throw new Error('Failed to capture element');
                    }
                }, 'image/jpeg', 0.9);
            });
        }
    }

    // Toast utility
    class ToastManager {
        private container: HTMLElement;

        constructor() {
            this.container = document.getElementById('toast-container')!;
        }

        show(message: string, options: ToastOptions = {}): void {
            const { type = 'info', duration = 3000 } = options;
            
            const toast = document.createElement('div');
            toast.className = `
                transform translate-x-full transition-all duration-300 ease-out
                bg-white/10 backdrop-blur-lg border border-white/20 rounded-xl 
                px-4 py-3 text-white text-sm shadow-lg max-w-xs
                ${type === 'success' ? 'border-green-500/30 bg-green-500/10' : ''}
                ${type === 'error' ? 'border-red-500/30 bg-red-500/10' : ''}
            `;
            
            toast.textContent = message;
            this.container.appendChild(toast);
            
            // Animate in
            requestAnimationFrame(() => {
                toast.classList.remove('translate-x-full');
            });
            
            // Remove after duration
            setTimeout(() => {
                toast.classList.add('translate-x-full');
                setTimeout(() => {
                    if (this.container.contains(toast)) {
                        this.container.removeChild(toast);
                    }
                }, 300);
            }, duration);
        }
    }
    // Main RunnerCard class
    class RunnerCardManager {
        private toast: ToastManager;
        private modal: HTMLElement;
        private currentRunnerData: RunnerData | null = null;
        private storyMapping: any = null;

        constructor() {
            this.toast = new ToastManager();
            this.modal = document.getElementById('share-modal')!;
            this.loadStoryMapping();
            this.init();
        }

        private init(): void {
            this.bindEvents();
        }

        private async loadStoryMapping(): Promise<void> {
            try {
                const response = await fetch('/generated-images/story-mapping.json');
                this.storyMapping = await response.json();
            } catch (error) {
                console.error('Error loading story mapping:', error);
            }
        }

        private getRunnerStoryImage(runnerId: number): string | null {
            if (!this.storyMapping?.results) return null;
            
            const runnerData = this.storyMapping.results.find((r: any) => r.runnerId === runnerId);
            return runnerData?.filename || null;
        }

        private isMobileDevice(): boolean {
            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
                   ('ontouchstart' in window) || 
                   (navigator.maxTouchPoints > 0);
        }

        private bindEvents(): void {
            // Card click events (excluding share button)
            document.querySelectorAll('[data-runner-id]').forEach(card => {
                card.addEventListener('click', (e) => {
                    if (!(e.target as Element).closest('.runner-share-btn')) {
                        this.handleCardClick(card as HTMLElement);
                    }
                });
            });

            // Share button events
            document.querySelectorAll('.runner-share-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    const card = btn.closest('[data-runner-id]') as HTMLElement;
                    this.openShareModal(card);
                });
            });

            // Modal events
            this.bindModalEvents();
        }

        private bindModalEvents(): void {
            // Close button
            const closeBtn = document.getElementById('close-share-modal');
            closeBtn?.addEventListener('click', () => this.closeModal());

            // Click outside to close
            this.modal.addEventListener('click', (e) => {
                if (e.target === this.modal) this.closeModal();
            });

            // Share platform buttons
            document.getElementById('share-mobile')?.addEventListener('click', () => this.shareToMobile());
            document.getElementById('download-image')?.addEventListener('click', () => this.downloadImage());

            // ESC key to close
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && this.modal.classList.contains('show')) {
                    this.closeModal();
                }
            });
        }

        private extractRunnerData(card: HTMLElement): RunnerData {
            return {
                id: parseInt(card.dataset.runnerId || '0'),
                name: card.dataset.runnerName || '',
                distance: card.dataset.runnerDistance || '',
                location: card.dataset.runnerLocation || '',
                avatar: card.dataset.runnerAvatar || ''
            };
        }

        private updateModalPreview(data: RunnerData): void {
            const avatar = document.getElementById('preview-avatar') as HTMLImageElement;
            // const name = document.getElementById('preview-name')!;
            // const info = document.getElementById('preview-info')!;

            if (avatar) avatar.src = data.avatar;
            // name.textContent = data.name;
            // info.textContent = `${data.distance} • ${data.location}`;
        }

        private async openShareModal(card: HTMLElement): Promise<void> {
            this.currentRunnerData = this.extractRunnerData(card);
            this.updateModalPreview(this.currentRunnerData);
            
            // Show the modal
            this.modal.classList.add('show');
            document.body.style.overflow = 'hidden';
            
            // Generate and show image preview
            await this.generateImagePreview(card);
        }

        private closeModal(): void {
            this.modal.classList.remove('show');
            document.body.style.overflow = '';
            this.currentRunnerData = null;
            
            // Hide the image preview
            const previewContainer = document.getElementById('image-preview-container');
            if (previewContainer) {
                previewContainer.classList.add('hidden');
            }
        }

        private async shareToMobile(): Promise<void> {
            if (!this.currentRunnerData) return;

            try {
                this.setLoadingState(true);
                const storyImageFilename = this.getRunnerStoryImage(this.currentRunnerData.id);
                
                let imageBlob: Blob;
                
                if (storyImageFilename) {
                    // Use the generated story image
                    const imageUrl = `/generated-images/${storyImageFilename}`;
                    const response = await fetch(imageUrl);
                    imageBlob = await response.blob();
                } else {
                    // Fallback to card capture
                    const card = document.querySelector(`[data-runner-id="${this.currentRunnerData.id}"]`) as HTMLElement;
                    imageBlob = await ImageCaptureService.captureElement(card);
                }
                
                // Create file for sharing
                const file = new File([imageBlob], `${this.currentRunnerData.name}-15kurrao-story.jpg`, { 
                    type: 'image/jpeg' 
                });
                
                // Debug information
                console.log('Share API available:', !!navigator.share);
                console.log('Can share files:', navigator.canShare?.({ files: [file] }));
                console.log('Is HTTPS:', location.protocol === 'https:');
                console.log('Is localhost:', location.hostname === 'localhost');
                console.log('Is mobile device:', this.isMobileDevice());
                
                // Check if native share is supported and we're on HTTPS or localhost
                const isSecureContext = location.protocol === 'https:' || location.hostname === 'localhost';
                const canShareFiles = navigator.canShare?.({ files: [file] });
                const isMobile = this.isMobileDevice();
                
                if (navigator.share && canShareFiles && isSecureContext) {
                    try {
                        await navigator.share({
                            title: `${this.currentRunnerData.name} - 15KURRAO`,
                            text: `🏃‍♂️ ¡Mira este corredor! ${this.currentRunnerData.name} se inscribió para la carrera de ${this.currentRunnerData.distance} desde ${this.currentRunnerData.location}. ¡Únete a la 15KURRAO! 🏁`,
                            files: [file]
                        });
                        this.toast.show('¡Compartido exitosamente!', { type: 'success' });
                        this.closeModal();
                        return;
                    } catch (shareError: any) {
                        console.error('Share API error:', shareError);
                        // If user cancels, don't show error
                        if (shareError.name === 'AbortError') {
                            this.closeModal();
                            return;
                        }
                        throw shareError;
                    }
                } else {
                    // Show why native share is not available
                    let reason = '';
                    if (!isSecureContext) {
                        reason = 'Se requiere HTTPS para compartir archivos';
                    } else if (!canShareFiles) {
                        reason = 'Tu navegador no soporta compartir archivos';
                    } else if (!navigator.share) {
                        reason = 'Tu navegador no soporta la función de compartir';
                    }
                    
                    console.warn('Native share not available:', reason);
                    
                    if (isMobile) {
                        this.toast.show(`En móvil se requiere HTTPS. ${reason}`, { type: 'info' });
                    } else {
                        this.toast.show(`Función de compartir no disponible: ${reason}`, { type: 'info' });
                    }
                }
                
                // Fallback: download the image
                this.downloadBlob(imageBlob, `${this.currentRunnerData.name}-15kurrao-story.jpg`);
                
                if (isMobile) {
                    this.toast.show('Imagen descargada. Ábrela en tu galería y compártela desde ahí.', { type: 'info' });
                } else {
                    this.toast.show('Imagen descargada. Compártela manualmente en tus redes sociales.', { type: 'info' });
                }
                this.closeModal();
                
            } catch (error) {
                console.error('Mobile share error:', error);
                this.toast.show('Error al compartir la imagen', { type: 'error' });
            } finally {
                this.setLoadingState(false);
            }
        }

        private async downloadImage(): Promise<void> {
            if (!this.currentRunnerData) return;

            try {
                this.setLoadingState(true);
                const storyImageFilename = this.getRunnerStoryImage(this.currentRunnerData.id);
                
                if (storyImageFilename) {
                    // Use the generated story image
                    const imageUrl = `/generated-images/${storyImageFilename}`;
                    const response = await fetch(imageUrl);
                    const imageBlob = await response.blob();
                    
                    this.downloadBlob(imageBlob, `${this.currentRunnerData.name}-15kurrao-story.jpg`);
                } else {
                    // Fallback to card capture
                    const card = document.querySelector(`[data-runner-id="${this.currentRunnerData.id}"]`) as HTMLElement;
                    const imageBlob = await ImageCaptureService.captureElement(card);
                    this.downloadBlob(imageBlob, `${this.currentRunnerData.name}-15kurrao-card.jpg`);
                }
                
                this.toast.show('¡Imagen descargada exitosamente!', { type: 'success' });
                this.closeModal();
            } catch (error) {
                console.error('Download error:', error);
                this.toast.show('Error al descargar la imagen', { type: 'error' });
            } finally {
                this.setLoadingState(false);
            }
        }


        private downloadBlob(blob: Blob, filename: string): void {
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        private setLoadingState(loading: boolean): void {
            const loadingEl = document.getElementById('loading-state');
            const buttons = this.modal.querySelectorAll('button:not(#close-share-modal)');
            
            if (loading) {
                loadingEl?.classList.remove('hidden');
                buttons.forEach(btn => btn.setAttribute('disabled', 'true'));
            } else {
                loadingEl?.classList.add('hidden');
                buttons.forEach(btn => btn.removeAttribute('disabled'));
            }
        }

        private async generateImagePreview(card: HTMLElement): Promise<void> {
            try {
                // Show loading state in preview
                const previewContainer = document.getElementById('image-preview-container');
                const imagePreview = document.getElementById('image-preview');
                
                if (previewContainer && imagePreview) {
                    previewContainer.classList.remove('hidden');
                    imagePreview.innerHTML = `
                        <div class="text-center text-white/60">
                            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto mb-2"></div>
                            <p class="text-sm">Cargando imagen generada...</p>
                        </div>
                    `;
                }

                // Get runner ID and find the corresponding story image
                const runnerId = parseInt(card.dataset.runnerId || '0');
                const storyImageFilename = this.getRunnerStoryImage(runnerId);
                
                if (storyImageFilename) {
                    // Use the generated story image
                    const imageUrl = `/generated-images/${storyImageFilename}`;
                    
                    if (imagePreview) {
                        imagePreview.innerHTML = `
                            <img src="${imageUrl}" alt="Imagen generada para ${this.currentRunnerData?.name}" class="w-full h-full object-contain rounded-lg" />
                        `;
                    }
                } else {
                    // Fallback to card capture if no story image found
                    const imageBlob = await ImageCaptureService.captureElement(card);
                    const previewUrl = URL.createObjectURL(imageBlob);
                    
                    if (imagePreview) {
                        imagePreview.innerHTML = `
                            <img src="${previewUrl}" alt="Vista previa de la imagen generada" class="w-full h-full object-contain rounded-lg" />
                        `;
                    }
                    
                    // Clean up the URL after a delay to ensure the image loads
                    setTimeout(() => {
                        URL.revokeObjectURL(previewUrl);
                    }, 5000);
                }
                
            } catch (error) {
                console.error('Error generating preview:', error);
                const imagePreview = document.getElementById('image-preview');
                if (imagePreview) {
                    imagePreview.innerHTML = `
                        <div class="text-center text-white/60">
                            <Icon name="tabler/alert-triangle" class="w-8 h-8 mx-auto mb-2 text-yellow-400" />
                            <p class="text-sm">Error al cargar la imagen generada</p>
                        </div>
                    `;
                }
            }
        }

        private handleCardClick(card: HTMLElement): void {
            const data = this.extractRunnerData(card);
            console.log('Card clicked:', data);
            this.toast.show(`Ver detalles de ${data.name}`);
        }
    }

    // Initialize when DOM is ready
    function initializeRunnerCards(): void {
        new RunnerCardManager();
    }

    // Auto-initialize
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeRunnerCards);
    } else {
        initializeRunnerCards();
    }
</script>