---
import Layout from '../layouts/Layout.astro';
import RunnerCard from '../components/RunnerCard.astro';
import { loadTallySubmissions, getTallyStatistics } from '../lib/loaders/tallyLoader';
import { tallyAPI } from '../lib/tally-cached';
import Image from 'astro:assets';
import defaultAvatar from '../assets/15.webp';
import { Icon } from "astro-icon/components";

// Load Tally data
let submissions;
let statistics;
let error = null;

try {
  // Get all submissions to display as runner cards
  submissions = await loadTallySubmissions({ getAll: true });
  
  // Get statistics for the header
  statistics = await getTallyStatistics();
} catch (err) {
  error = err instanceof Error ? err.message : 'Unknown error occurred';
  console.error('Error loading Tally data:', err);
}

// Helper function to get time ago in minutes
function getTimeAgo(dateString: string): number {
  const now = new Date();
  const submissionDate = new Date(dateString);
  const diffInMs = now.getTime() - submissionDate.getTime();
  return Math.floor(diffInMs / (1000 * 60)); // Convert to minutes
}

// Helper function to get a default avatar using the 15.webp image
function getDefaultAvatar(gender: string): string {
  // Use the 15.webp image as default avatar for all users
  return defaultAvatar.src;
}

// Helper function to shuffle an array (Fisher-Yates algorithm)
function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array]; // Create a copy to avoid mutating the original
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

// Process submissions into runner cards data
const runnersData = submissions?.submissions.map((submission, index) => {
  // Extract field values using question IDs from the API response
  const name = submission.responses.find(r => r.questionId === '8LvzBA')?.answer || '';
  const lastName = submission.responses.find(r => r.questionId === '08279Z')?.answer || '';
  const secondLastName = submission.responses.find(r => r.questionId === 'RoXdNl')?.answer || '';
  const distance = submission.responses.find(r => r.questionId === 'OXpl2K')?.answer?.[0] || '10K';
  const gender = submission.responses.find(r => r.questionId === 'VPRjea')?.answer?.[0] || 'Masculino';
  const photoUpload = submission.responses.find(r => r.questionId === 'N74EQB')?.answer?.[0];
  // Get photo URL if available, otherwise use default avatar
  let avatar = getDefaultAvatar(gender);
  if (photoUpload && photoUpload.url) {
    avatar = photoUpload.url;
  }

  
  
  // Format registration time
  const registrationDate = new Date(submission.submittedAt);
  const registrationTime = registrationDate.toLocaleDateString('es-ES', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
  
  // Calculate time ago
  const timeAgo = getTimeAgo(submission.submittedAt);
  
  // Full name
  // const fullName = `${name} ${lastName} ${secondLastName}`.trim();
  const fullName = `${name} `.trim();
  
  return {
    id: index + 1,
    name: fullName,
    distance: distance as "10K" | "15K",
    registrationTime,
    timeAgo,
    avatar,
    location: "Urrao, Antioquia", // Default location since it's not in the form
    gender,
  };
}) || [];

// Shuffle the runners list for random display order
const runners = shuffleArray(runnersData);

---

<Layout title="Corredores - 15K Urrao">
  <main class="relative py-20 bg-gradient-to-bl from-secondary-500 via-primary-500 to-primary-900 overflow-hidden text-white">
    <div class="container mx-auto px-4 py-8">
      <!-- Header Section -->
      <header class="text-center mb-12">
        <h1 class="text-4xl md:text-6xl font-bold mb-4 bg-gradient-to-r from-white to-blue-200 bg-clip-text text-transparent">
          Corredores 15K Urrao
        </h1>
        <p class="text-xl text-gray-100 mb-8">
          Conoce a todos los participantes inscritos en la carrera
        </p>
        
        {error ? (
          <div class="bg-red-600/20 border border-red-500/50 rounded-lg p-6 max-w-2xl mx-auto">
            <h2 class="text-xl font-semibold mb-2 text-red-200">Error al cargar datos</h2>
            <p class="text-red-100">{error}</p>
          </div>
        ) : (
          <!-- Statistics Cards -->
          <div class="grid grid-cols-2 md:grid-cols-3 gap-4 max-w-4xl mx-auto mb-8">
            <div class="bg-white/10 backdrop-blur-sm rounded-lg p-4 text-center">
              <div class="text-2xl font-bold text-white fong-nova">{statistics?.totalSubmissions || 0}</div>
              <div class="text-base text-gray-100">Total Inscritos</div>
            </div>
            <div class="bg-white/10 backdrop-blur-sm rounded-lg p-4 text-center">
              <div class="text-2xl font-bold text-white">{statistics?.byDistance?.['10K'] || 0}</div>
              <div class="text-base text-gray-100">Corredores 10K</div>
            </div>
            <div class="bg-white/10 backdrop-blur-sm rounded-lg p-4 text-center">
              <div class="text-2xl font-bold text-white">{statistics?.byDistance?.['15K'] || 0}</div>
              <div class="text-base text-gray-100">Corredores 15K</div>
            </div>
          </div>
          
          <!-- Search Bar -->
          <div class="max-w-md mx-auto mb-8">
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Icon name="tabler/search" class="w-5 h-5 text-gray-300" />   
              </div>
              <input
                type="text"
                id="runner-search"
                class="w-full pl-10 pr-4 py-3 bg-white/10  border border-white/20 rounded-lg text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-secondary-500 focus:border-transparent transition-all duration-300"
                placeholder="Buscar corredor por nombre..."
                autocomplete="off"
              />
              <div class="absolute inset-y-0 right-0 pr-3 flex items-center">
                <div id="search-results-count" class="text-sm text-gray-300 hidden">
                  <span id="results-number">0</span> resultados
                </div>
              </div>
            </div>
          </div>
        )}
      </header>

      <!-- Runners Grid -->
      {runners.length > 0 ? (
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {runners.map((runner) => (
            <RunnerCard
              id={runner.id}
              name={runner.name}
              distance={runner.distance}
              registrationTime={runner.registrationTime}
              timeAgo={runner.timeAgo}
              avatar={runner.avatar}
              location={runner.location}
              gender={runner.gender}
            />
          ))}
        </div>
      ) : (
        <!-- Empty State -->
        <div class="text-center py-16">
          <div class="bg-white/10 backdrop-blur-sm rounded-lg p-12 max-w-md mx-auto">
            <div class="text-6xl mb-4">üèÉ‚Äç‚ôÇÔ∏è</div>
            <h3 class="text-xl font-semibold mb-2">No hay corredores a√∫n</h3>
            <p class="text-gray-300 mb-6">
              S√© el primero en inscribirte y aparecer en esta lista
            </p>
            <a 
              href="/inscripciones" 
              class="inline-block bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-3 rounded-lg font-medium hover:shadow-lg hover:shadow-blue-500/25 transition-all duration-300 transform hover:scale-105"
            >
              Inscribirse Ahora
            </a>
          </div>
        </div>
      )}

      <!-- Footer Info -->
      {runners.length > 0 && (
        <div class="text-center mt-12 text-gray-400">
          <p class="text-sm">
            Mostrando {runners.length} corredores de {statistics?.totalSubmissions || 0} inscritos
          </p>
          <p class="text-xs mt-2">
            Los datos se actualizan autom√°ticamente desde el formulario de inscripci√≥n
          </p>
          <div class="mt-4 flex justify-center gap-4">
            {/* <button 
              id="clear-cache-btn"
              class="px-4 py-2 bg-red-600/20 border border-red-500/50 rounded-lg text-red-200 hover:bg-red-600/30 transition-colors text-sm"
            >
              Limpiar Cache
            </button> */}
            <button 
              id="refresh-data-btn"
              class="px-4 py-2 bg-blue-600/20 border border-blue-500/50 rounded-lg text-blue-200 hover:bg-blue-600/30 transition-colors text-sm"
            >
              Actualizar Datos
            </button>
          </div>
        </div>
      )}
    </div>
  </main>
</Layout>

<style>
  /* Custom styles for the runners page */
  .bg-gradient-to-r {
    background: linear-gradient(to right, var(--tw-gradient-stops));
  }
  
  .bg-clip-text {
    -webkit-background-clip: text;
    background-clip: text;
  }
  
  /* Smooth animations */
  .grid > * {
    animation: fadeInUp 0.6s ease-out;
    animation-fill-mode: both;
  }
  
  .grid > *:nth-child(1) { animation-delay: 0.1s; }
  .grid > *:nth-child(2) { animation-delay: 0.2s; }
  .grid > *:nth-child(3) { animation-delay: 0.3s; }
  .grid > *:nth-child(4) { animation-delay: 0.4s; }
  .grid > *:nth-child(5) { animation-delay: 0.5s; }
  .grid > *:nth-child(6) { animation-delay: 0.6s; }
  .grid > *:nth-child(7) { animation-delay: 0.7s; }
  .grid > *:nth-child(8) { animation-delay: 0.8s; }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  // Cache management functionality
  document.addEventListener('DOMContentLoaded', function() {
    const clearCacheBtn = document.getElementById('clear-cache-btn');
    const refreshDataBtn = document.getElementById('refresh-data-btn');

    if (clearCacheBtn) {
      clearCacheBtn.addEventListener('click', async function() {
        try {
          // Call the API to clear cache
          const response = await fetch('/api/tally.json?action=clearCache', {
            method: 'POST'
          });
          
          if (response.ok) {
            alert('Cache limpiado exitosamente');
            location.reload();
          } else {
            alert('Error al limpiar el cache');
          }
        } catch (error) {
          console.error('Error clearing cache:', error);
          alert('Error al limpiar el cache');
        }
      });
    }

    if (refreshDataBtn) {
      refreshDataBtn.addEventListener('click', async function() {
        try {
          // Call the API to refresh data (bypass cache)
          const response = await fetch('/api/tally.json?getAll=true&bypassCache=true', {
            method: 'GET'
          });
          
          if (response.ok) {
            alert('Datos actualizados exitosamente');
            location.reload();
          } else {
            alert('Error al actualizar los datos');
          }
        } catch (error) {
          console.error('Error refreshing data:', error);
          alert('Error al actualizar los datos');
        }
      });
    }

    // Search functionality
    initializeSearchFeature();
  });

  // Search functionality for filtering runner cards
  function initializeSearchFeature() {
    const searchInput = document.getElementById('runner-search') as HTMLInputElement;
    const runnerCards = document.querySelectorAll('[data-runner-id]') as NodeListOf<HTMLElement>;
    const runnerGrid = document.querySelector('.grid.grid-cols-1.sm\\:grid-cols-2.lg\\:grid-cols-3.xl\\:grid-cols-4') as HTMLElement;
    const resultsCount = document.getElementById('search-results-count') as HTMLElement;
    const resultsNumber = document.getElementById('results-number') as HTMLElement;
    const emptyState = document.querySelector('.text-center.py-16') as HTMLElement;

    if (!searchInput || !runnerCards.length) return;

    // Debounce function for performance
    function debounce(func: (...args: any[]) => void, wait: number): (...args: any[]) => void {
      let timeout: NodeJS.Timeout;
      return function executedFunction(...args: any[]) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    // Function to create "no results" message
    function createNoResultsMessage(searchTerm: string): HTMLElement {
      const noResultsDiv = document.createElement('div');
      noResultsDiv.id = 'no-search-results';
      noResultsDiv.className = 'text-center py-16 col-span-full';
      noResultsDiv.innerHTML = `
        <div class="bg-white/10 backdrop-blur-sm rounded-lg p-12 max-w-md mx-auto">
          <div class="text-6xl mb-4">üîç</div>
          <h3 class="text-xl font-semibold mb-2 text-white">No se encontraron resultados</h3>
          <p class="text-gray-300 mb-6">
            No hay corredores que coincidan con "<span class="font-medium text-white">${searchTerm}</span>"
          </p>
          <button 
            id="clear-search-btn"
            class="inline-block bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-3 rounded-lg font-medium hover:shadow-lg hover:shadow-blue-500/25 transition-all duration-300 transform hover:scale-105"
          >
            Limpiar b√∫squeda
          </button>
        </div>
      `;
      return noResultsDiv;
    }

    // Function to filter runner cards
    function filterRunners(searchTerm: string): void {
      const normalizedSearchTerm = searchTerm.toLowerCase().trim();
      let visibleCount = 0;

      // Remove existing "no results" message
      const existingNoResults = document.getElementById('no-search-results');
      if (existingNoResults) {
        existingNoResults.remove();
      }

      runnerCards.forEach(card => {
        const runnerName = (card.dataset.runnerName || '').toLowerCase();
        const isMatch = runnerName.includes(normalizedSearchTerm);
        
        if (isMatch || normalizedSearchTerm === '') {
          card.style.display = '';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });

      // Update results count
      if (normalizedSearchTerm) {
        if (resultsNumber) {
          resultsNumber.textContent = visibleCount.toString();
        }
        if (resultsCount) {
          resultsCount.classList.remove('hidden');
        }
        
        // Show "no results" message if no matches
        if (visibleCount === 0 && runnerGrid) {
          const noResultsMsg = createNoResultsMessage(searchTerm);
          runnerGrid.appendChild(noResultsMsg);
          
          // Add event listener to clear search button
          const clearSearchBtn = noResultsMsg.querySelector('#clear-search-btn') as HTMLButtonElement;
          clearSearchBtn?.addEventListener('click', () => {
            if (searchInput) {
              searchInput.value = '';
              filterRunners('');
            }
          });
        }
      } else {
        if (resultsCount) {
          resultsCount.classList.add('hidden');
        }
      }

      // Hide/show empty state based on whether we have any runners
      if (emptyState) {
        if (runnerCards.length === 0) {
          emptyState.style.display = '';
        } else {
          emptyState.style.display = 'none';
        }
      }
    }

    // Create debounced search function
    const debouncedFilter = debounce(filterRunners, 300);

    // Add event listeners
    searchInput.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      if (target) {
        debouncedFilter(target.value);
      }
    });

    // Clear search when escape is pressed
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        searchInput.value = '';
        filterRunners('');
        searchInput.blur();
      }
    });

    // Initial state - make sure results count is hidden
    if (resultsCount) {
      resultsCount.classList.add('hidden');
    }
  }
</script>
